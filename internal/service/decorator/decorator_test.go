package decorator

import (
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestDecoratorDecorate_Full(t *testing.T) {
	// –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.
	baseDir := t.TempDir()

	// –°–æ–∑–¥–∞—ë–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —ç–º–æ–¥–∑–∏ –≤ –∏–º–µ–Ω–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–º–æ–¥–∑–∏ –¥–∞–ª—å—à–µ.
	rootDir := filepath.Join(baseDir, "Root üòÄ")
	require.NoError(t, os.Mkdir(rootDir, 0755))

	// --- 1. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ (—Ç–∞–∫ –∫–∞–∫ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–æ–¥–∑–∏) ---
	// –°–æ–∑–¥–∞—ë–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é "SubDir" –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ä–Ω–µ–≤–æ–π.
	subDir := filepath.Join(rootDir, "SubDir")
	require.NoError(t, os.Mkdir(subDir, 0755))

	// –§–∞–π–ª –≤–Ω—É—Ç—Ä–∏ subDir, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
	file2 := filepath.Join(subDir, "2 something.md")
	require.NoError(t, os.WriteFile(file2, []byte("content"), 0644))

	// --- 2. –§–∞–π–ª –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω ---
	// –ò–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç "BaseName rest", –≥–¥–µ BaseName –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–æ–¥–∑–∏.
	file1 := filepath.Join(rootDir, "1 something.md")
	require.NoError(t, os.WriteFile(file1, []byte("content"), 0644))

	// --- 3. –§–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è (–Ω–µ .md) ---
	fileOther := filepath.Join(rootDir, "other.txt")
	require.NoError(t, os.WriteFile(fileOther, []byte("content"), 0644))

	// --- 4. –§–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–æ–¥–∑–∏ ‚Äì –µ–≥–æ –∏–º—è –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è ---
	fileAlready := filepath.Join(rootDir, "1 üòÄ decorated.md")
	require.NoError(t, os.WriteFile(fileAlready, []byte("content"), 0644))

	// --- 5. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –∏–º—è –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–æ—á–∫–∏ (skip-–ø–∞—Ç—Ç–µ—Ä–Ω) ---
	hiddenDir := filepath.Join(rootDir, ".hidden")
	require.NoError(t, os.Mkdir(hiddenDir, 0755))
	fileHidden := filepath.Join(hiddenDir, "FileHidden something.md")
	require.NoError(t, os.WriteFile(fileHidden, []byte("content"), 0644))

	// --- 6. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –∏–º—è –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "_" (skip-–ø–∞—Ç—Ç–µ—Ä–Ω) ---
	skipDir := filepath.Join(rootDir, "_skipDir")
	require.NoError(t, os.Mkdir(skipDir, 0755))
	fileSkip := filepath.Join(skipDir, "FileSkip something.md")
	require.NoError(t, os.WriteFile(fileSkip, []byte("content"), 0644))

	// --- 7. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –∏–º—è –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "any" (skip-–ø–∞—Ç—Ç–µ—Ä–Ω) ---
	anyDir := filepath.Join(rootDir, "anyfolder")
	require.NoError(t, os.Mkdir(anyDir, 0755))
	fileAny := filepath.Join(anyDir, "FileAny something.md")
	require.NoError(t, os.WriteFile(fileAny, []byte("content"), 0644))

	// –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ —Å concurrencyLimit=2 –∏ skipPatterns [".", "_", "any"]
	decor := NewDecorator(rootDir, 2, []string{".", "_", "any"})

	// –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ö–æ–¥–∏—Ç –∏ –¥–µ–∫–æ—Ä–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª—ã.
	err := decor.Decorate()
	require.NoError(t, err)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è "üòÄRoot" –æ—Å—Ç–∞–ª–∞—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
	info, err := os.Stat(rootDir)
	require.NoError(t, err)
	require.True(t, info.IsDir())

	// –§–∞–π–ª "1 something.md" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ "1 üòÄ something.md"
	newFile1 := filepath.Join(rootDir, "1 üòÄ something.md")
	_, err = os.Stat(newFile1)
	require.NoError(t, err)

	// –§–∞–π–ª "other.txt" –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
	_, err = os.Stat(fileOther)
	require.NoError(t, err)

	// –§–∞–π–ª "1 üòÄ decorated.md" –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
	_, err = os.Stat(fileAlready)
	require.NoError(t, err)

	// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ".hidden" (–∏ –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ) –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–∞.
	info, err = os.Stat(hiddenDir)
	require.NoError(t, err)
	require.True(t, info.IsDir())
	_, err = os.Stat(fileHidden)
	require.NoError(t, err)

	// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –∏–º—è –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "_" (skip), –Ω–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è.
	info, err = os.Stat(skipDir)
	require.NoError(t, err)
	require.True(t, info.IsDir())
	_, err = os.Stat(fileSkip)
	require.NoError(t, err)

	// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è "anyfolder" –Ω–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è (—Ç–∞–∫ –∫–∞–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "any" –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É).
	info, err = os.Stat(anyDir)
	require.NoError(t, err)
	require.True(t, info.IsDir())
	_, err = os.Stat(fileAny)
	require.NoError(t, err)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è "SubDir" –±—ã–ª–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ "SubDir üòÄ"
	newSubDir := filepath.Join(rootDir, "SubDir üòÄ")
	info, err = os.Stat(newSubDir)
	require.NoError(t, err)
	require.True(t, info.IsDir())

	// –§–∞–π–ª –≤ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–º–æ–¥–∑–∏, —Ç. –µ. –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å—Å—è –≤ "2 üòÄ something.md"
	newFile2 := filepath.Join(newSubDir, "2 üòÄ something.md")
	_, err = os.Stat(newFile2)
	require.NoError(t, err)
}

func TestDecorator_SkipDirectory(t *testing.T) {
	rootDir := t.TempDir()
	skipDirName := ".hiddenDir"
	skipDirPath := filepath.Join(rootDir, skipDirName)
	err := os.Mkdir(skipDirPath, 0755)
	require.NoError(t, err)

	fileName := "test something.md"
	filePath := filepath.Join(skipDirPath, fileName)
	err = os.WriteFile(filePath, []byte("content"), 0644)
	require.NoError(t, err)

	decor := NewDecorator(rootDir, 2, []string{"."})
	err = decor.Decorate()
	require.NoError(t, err)

	// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏ —Ñ–∞–π–ª –≤–Ω—É—Ç—Ä–∏ –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
	_, err = os.Stat(skipDirPath)
	require.NoError(t, err)
	_, err = os.Stat(filePath)
	require.NoError(t, err)
}

func TestDecorator_RenameMarkdownFile(t *testing.T) {
	rootDir := t.TempDir()
	parentDir := filepath.Dir(rootDir)
	emojiRoot := filepath.Join(parentDir, "üòÄRoot")
	err := os.Rename(rootDir, emojiRoot)
	require.NoError(t, err)
	rootDir = emojiRoot

	// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±–µ–∑ —ç–º–æ–¥–∑–∏ –≤ –∏–º–µ–Ω–∏.
	subDirName := "SubDir"
	subDirPath := filepath.Join(rootDir, subDirName)
	err = os.Mkdir(subDirPath, 0755)
	require.NoError(t, err)

	fileName := "1 something.md"
	filePath := filepath.Join(subDirPath, fileName)
	err = os.WriteFile(filePath, []byte("content"), 0644)
	require.NoError(t, err)

	decor := NewDecorator(rootDir, 2, []string{})
	err = decor.Decorate()
	require.NoError(t, err)

	expectedSubDirName := "SubDir üòÄ"
	expectedSubDirPath := filepath.Join(rootDir, expectedSubDirName)
	_, err = os.Stat(expectedSubDirPath)
	require.NoError(t, err)

	expectedFileName := "1 üòÄ something.md"
	expectedFilePath := filepath.Join(expectedSubDirPath, expectedFileName)
	_, err = os.Stat(expectedFilePath)
	require.NoError(t, err)
}

func TestDecorator_NonExistentDirectory(t *testing.T) {
	nonExistentDir := filepath.Join(t.TempDir(), "nonexistent")
	decor := NewDecorator(nonExistentDir, 2, []string{})
	// –§—É–Ω–∫—Ü–∏—è Decorate –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
	require.NotPanics(t, func() {
		err := decor.Decorate()
		require.NoError(t, err)
	})
}

func TestAddEmojiToFilename_NonMarkdown(t *testing.T) {
	tempDir := t.TempDir()
	fileName := "test.txt"
	filePath := filepath.Join(tempDir, fileName)
	err := os.WriteFile(filePath, []byte("content"), 0644)
	require.NoError(t, err)

	err = addEmojiToFilename(fileName, "üòÄ", tempDir, filePath)
	require.NoError(t, err)

	_, err = os.Stat(filePath)
	require.NoError(t, err)
}

func TestAddEmojiToFilename_NoSpaceInName(t *testing.T) {
	tempDir := t.TempDir()
	// –ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º.
	fileName := "test.md"
	filePath := filepath.Join(tempDir, fileName)
	err := os.WriteFile(filePath, []byte("content"), 0644)
	require.NoError(t, err)

	err = addEmojiToFilename(fileName, "üòÄ", tempDir, filePath)
	require.NoError(t, err)

	_, err = os.Stat(filePath)
	require.NoError(t, err)
}

func TestAddEmojiToFilename_AlreadyHasEmoji(t *testing.T) {
	tempDir := t.TempDir()
	// –§–∞–π–ª —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–æ–¥–∑–∏ –≤ –±–∞–∑–æ–≤–æ–π —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏.
	fileName := "1 üòÄ something.md"
	filePath := filepath.Join(tempDir, fileName)
	err := os.WriteFile(filePath, []byte("content"), 0644)
	require.NoError(t, err)

	err = addEmojiToFilename(fileName, "üòÄ", tempDir, filePath)
	require.NoError(t, err)

	_, err = os.Stat(filePath)
	require.NoError(t, err)
}
